// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentManagement;

#nullable disable

namespace TournamentManagement.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230717183456_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TournamentManagement.Models.Domains.Match", b =>
                {
                    b.Property<int>("AwayParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("HomeParticipantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ScoreAway")
                        .HasColumnType("int");

                    b.Property<int>("ScoreHome")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("AwayParticipantId", "HomeParticipantId");

                    b.HasIndex("HomeParticipantId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Match", b =>
                {
                    b.HasOne("TournamentManagement.Models.Domains.Participant", "AwayParticipant")
                        .WithMany("MatchesAsGuest")
                        .HasForeignKey("AwayParticipantId")
                        .IsRequired();

                    b.HasOne("TournamentManagement.Models.Domains.Participant", "HomeParticipant")
                        .WithMany("MatchesAsHost")
                        .HasForeignKey("HomeParticipantId")
                        .IsRequired();

                    b.HasOne("TournamentManagement.Models.Domains.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.Navigation("AwayParticipant");

                    b.Navigation("HomeParticipant");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Participant", b =>
                {
                    b.HasOne("TournamentManagement.Models.Domains.Team", "Team")
                        .WithMany("Participants")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentManagement.Models.Domains.Tournament", "Tournament")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Participant", b =>
                {
                    b.Navigation("MatchesAsGuest");

                    b.Navigation("MatchesAsHost");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Team", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("TournamentManagement.Models.Domains.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
